// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/smd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/smd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace smd {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* PlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_PlayersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerUndo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUndo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoData_PlayersEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Direction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fsmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fsmd_2eproto() {
  protobuf_AddDesc_proto_2fsmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/smd.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerState_descriptor_ = file->message_type(0);
  static const int PlayerState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, steps_left_),
  };
  PlayerState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerState_descriptor_,
      PlayerState::default_instance_,
      PlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _internal_metadata_),
      -1);
  GameState_descriptor_ = file->message_type(1);
  static const int GameState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, players_),
  };
  GameState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _internal_metadata_),
      -1);
  GameState_PlayersEntry_descriptor_ = GameState_descriptor_->nested_type(0);
  PlayerUndo_descriptor_ = file->message_type(2);
  static const int PlayerUndo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, previous_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, previous_steps_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, finished_dir_),
  };
  PlayerUndo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerUndo_descriptor_,
      PlayerUndo::default_instance_,
      PlayerUndo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerUndo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUndo, _internal_metadata_),
      -1);
  UndoData_descriptor_ = file->message_type(3);
  static const int UndoData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoData, players_),
  };
  UndoData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UndoData_descriptor_,
      UndoData::default_instance_,
      UndoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoData, _has_bits_[0]),
      -1,
      -1,
      sizeof(UndoData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoData, _internal_metadata_),
      -1);
  UndoData_PlayersEntry_descriptor_ = UndoData_descriptor_->nested_type(0);
  Direction_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fsmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerState_descriptor_, &PlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameState_descriptor_, &GameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GameState_PlayersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::smd::proto::PlayerState,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GameState_PlayersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerUndo_descriptor_, &PlayerUndo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UndoData_descriptor_, &UndoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        UndoData_PlayersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::smd::proto::PlayerUndo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                UndoData_PlayersEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_proto_2fsmd_2eproto() {
  delete PlayerState::default_instance_;
  delete PlayerState_reflection_;
  delete GameState::default_instance_;
  delete GameState_reflection_;
  delete PlayerUndo::default_instance_;
  delete PlayerUndo_reflection_;
  delete UndoData::default_instance_;
  delete UndoData_reflection_;
}

void protobuf_AddDesc_proto_2fsmd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fsmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017proto/smd.proto\022\013smd.proto\"\\\n\013Player"
    "State\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\022#\n\003dir\030\003 \001(\016"
    "2\026.smd.proto.Direction\022\022\n\nsteps_left\030\004"
    " \001(\r\"\213\001\n\tGameState\0224\n\007players\030\001 \003(\0132#.mo"
    "ver.proto.GameState.PlayersEntry\032H\n\014Play"
    "ersEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.m"
    "over.proto.PlayerState:\0028\001\"\225\001\n\nPlayerUnd"
    "o\022\016\n\006is_new\030\001 \001(\010\022,\n\014previous_dir\030\002 \001(\0162"
    "\026.smd.proto.Direction\022\033\n\023previous_step"
    "s_left\030\003 \001(\r\022,\n\014finished_dir\030\004 \001(\0162\026.mov"
    "er.proto.Direction\"\210\001\n\010UndoData\0223\n\007playe"
    "rs\030\001 \003(\0132\".smd.proto.UndoData.PlayersE"
    "ntry\032G\n\014PlayersEntry\022\013\n\003key\030\001 \001(\t\022&\n\005val"
    "ue\030\002 \001(\0132\027.smd.proto.PlayerUndo:\0028\001*v\n"
    "\tDirection\022\010\n\004NONE\020\000\022\t\n\005RIGHT\020\001\022\010\n\004LEFT\020"
    "\002\022\006\n\002UP\020\003\022\010\n\004DOWN\020\004\022\014\n\010RIGHT_UP\020\005\022\016\n\nRIG"
    "HT_DOWN\020\006\022\013\n\007LEFT_UP\020\007\022\r\n\tLEFT_DOWN\020\010", 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/smd.proto", &protobuf_RegisterTypes);
  PlayerState::default_instance_ = new PlayerState();
  GameState::default_instance_ = new GameState();
  PlayerUndo::default_instance_ = new PlayerUndo();
  UndoData::default_instance_ = new UndoData();
  PlayerState::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  PlayerUndo::default_instance_->InitAsDefaultInstance();
  UndoData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fsmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fsmd_2eproto {
  StaticDescriptorInitializer_proto_2fsmd_2eproto() {
    protobuf_AddDesc_proto_2fsmd_2eproto();
  }
} static_descriptor_initializer_proto_2fsmd_2eproto_;
const ::google::protobuf::EnumDescriptor* Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Direction_descriptor_;
}
bool Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerState::kXFieldNumber;
const int PlayerState::kYFieldNumber;
const int PlayerState::kDirFieldNumber;
const int PlayerState::kStepsLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerState::PlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smd.proto.PlayerState)
}

void PlayerState::InitAsDefaultInstance() {
}

PlayerState::PlayerState(const PlayerState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:smd.proto.PlayerState)
}

void PlayerState::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  dir_ = 0;
  steps_left_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:smd.proto.PlayerState)
  SharedDtor();
}

void PlayerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerState_descriptor_;
}

const PlayerState& PlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsmd_2eproto();
  return *default_instance_;
}

PlayerState* PlayerState::default_instance_ = NULL;

PlayerState* PlayerState::New(::google::protobuf::Arena* arena) const {
  PlayerState* n = new PlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:smd.proto.PlayerState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, steps_left_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smd.proto.PlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional sint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dir;
        break;
      }

      // optional .smd.proto.Direction dir = 3;
      case 3: {
        if (tag == 24) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::smd::proto::Direction_IsValid(value)) {
            set_dir(static_cast< ::smd::proto::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_steps_left;
        break;
      }

      // optional uint32 steps_left = 4;
      case 4: {
        if (tag == 32) {
         parse_steps_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steps_left_)));
          set_has_steps_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smd.proto.PlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smd.proto.PlayerState)
  return false;
#undef DO_
}

void PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smd.proto.PlayerState)
  // optional sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }

  // optional sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }

  // optional .smd.proto.Direction dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dir(), output);
  }

  // optional uint32 steps_left = 4;
  if (has_steps_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steps_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smd.proto.PlayerState)
}

::google::protobuf::uint8* PlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smd.proto.PlayerState)
  // optional sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }

  // optional sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }

  // optional .smd.proto.Direction dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dir(), target);
  }

  // optional uint32 steps_left = 4;
  if (has_steps_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steps_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smd.proto.PlayerState)
  return target;
}

int PlayerState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:smd.proto.PlayerState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }

    // optional sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }

    // optional .smd.proto.Direction dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional uint32 steps_left = 4;
    if (has_steps_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steps_left());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smd.proto.PlayerState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smd.proto.PlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smd.proto.PlayerState)
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smd.proto.PlayerState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_steps_left()) {
      set_steps_left(from.steps_left());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smd.proto.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smd.proto.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {

  return true;
}

void PlayerState::Swap(PlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerState::InternalSwap(PlayerState* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(dir_, other->dir_);
  std::swap(steps_left_, other->steps_left_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerState_descriptor_;
  metadata.reflection = PlayerState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerState

// optional sint32 x = 1;
bool PlayerState::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerState::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerState::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerState::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 PlayerState::x() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerState.x)
  return x_;
}
 void PlayerState::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerState.x)
}

// optional sint32 y = 2;
bool PlayerState::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerState::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerState::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerState::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 PlayerState::y() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerState.y)
  return y_;
}
 void PlayerState::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerState.y)
}

// optional .smd.proto.Direction dir = 3;
bool PlayerState::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerState::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerState::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerState::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
 ::smd::proto::Direction PlayerState::dir() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerState.dir)
  return static_cast< ::smd::proto::Direction >(dir_);
}
 void PlayerState::set_dir(::smd::proto::Direction value) {
  assert(::smd::proto::Direction_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerState.dir)
}

// optional uint32 steps_left = 4;
bool PlayerState::has_steps_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerState::set_has_steps_left() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerState::clear_has_steps_left() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerState::clear_steps_left() {
  steps_left_ = 0u;
  clear_has_steps_left();
}
 ::google::protobuf::uint32 PlayerState::steps_left() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerState.steps_left)
  return steps_left_;
}
 void PlayerState::set_steps_left(::google::protobuf::uint32 value) {
  set_has_steps_left();
  steps_left_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerState.steps_left)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smd.proto.GameState)
}

void GameState::InitAsDefaultInstance() {
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:smd.proto.GameState)
}

void GameState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  players_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  players_.SetEntryDescriptor(
      &::smd::proto::GameState_PlayersEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:smd.proto.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsmd_2eproto();
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New(::google::protobuf::Arena* arena) const {
  GameState* n = new GameState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:smd.proto.GameState)
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smd.proto.GameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .smd.proto.PlayerState> players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          GameState_PlayersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::smd::proto::PlayerState,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState > > parser(&players_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smd.proto.GameState.PlayersEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smd.proto.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smd.proto.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smd.proto.GameState)
  // map<string, .smd.proto.PlayerState> players = 1;
  if (!this->players().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "smd.proto.GameState.PlayersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->players().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->players().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GameState_PlayersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(players_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameState_PlayersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it) {
        entry.reset(players_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smd.proto.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smd.proto.GameState)
  // map<string, .smd.proto.PlayerState> players = 1;
  if (!this->players().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "smd.proto.GameState.PlayersEntry.key");
      }
    };

    if (deterministic &&
        this->players().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->players().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GameState_PlayersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(players_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameState_PlayersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it) {
        entry.reset(players_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smd.proto.GameState)
  return target;
}

int GameState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:smd.proto.GameState)
  int total_size = 0;

  // map<string, .smd.proto.PlayerState> players = 1;
  total_size += 1 * this->players_size();
  {
    ::google::protobuf::scoped_ptr<GameState_PlayersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >::const_iterator
        it = this->players().begin();
        it != this->players().end(); ++it) {
      entry.reset(players_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smd.proto.GameState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GameState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smd.proto.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smd.proto.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smd.proto.GameState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smd.proto.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smd.proto.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {

  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  players_.Swap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameState

// map<string, .smd.proto.PlayerState> players = 1;
int GameState::players_size() const {
  return players_.size();
}
void GameState::clear_players() {
  players_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >&
GameState::players() const {
  // @@protoc_insertion_point(field_map:smd.proto.GameState.players)
  return players_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerState >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:smd.proto.GameState.players)
  return players_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerUndo::kIsNewFieldNumber;
const int PlayerUndo::kPreviousDirFieldNumber;
const int PlayerUndo::kPreviousStepsLeftFieldNumber;
const int PlayerUndo::kFinishedDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerUndo::PlayerUndo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smd.proto.PlayerUndo)
}

void PlayerUndo::InitAsDefaultInstance() {
}

PlayerUndo::PlayerUndo(const PlayerUndo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:smd.proto.PlayerUndo)
}

void PlayerUndo::SharedCtor() {
  _cached_size_ = 0;
  is_new_ = false;
  previous_dir_ = 0;
  previous_steps_left_ = 0u;
  finished_dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUndo::~PlayerUndo() {
  // @@protoc_insertion_point(destructor:smd.proto.PlayerUndo)
  SharedDtor();
}

void PlayerUndo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerUndo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUndo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUndo_descriptor_;
}

const PlayerUndo& PlayerUndo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsmd_2eproto();
  return *default_instance_;
}

PlayerUndo* PlayerUndo::default_instance_ = NULL;

PlayerUndo* PlayerUndo::New(::google::protobuf::Arena* arena) const {
  PlayerUndo* n = new PlayerUndo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerUndo::Clear() {
// @@protoc_insertion_point(message_clear_start:smd.proto.PlayerUndo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerUndo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerUndo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_new_, finished_dir_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerUndo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smd.proto.PlayerUndo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_new = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_previous_dir;
        break;
      }

      // optional .smd.proto.Direction previous_dir = 2;
      case 2: {
        if (tag == 16) {
         parse_previous_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::smd::proto::Direction_IsValid(value)) {
            set_previous_dir(static_cast< ::smd::proto::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_previous_steps_left;
        break;
      }

      // optional uint32 previous_steps_left = 3;
      case 3: {
        if (tag == 24) {
         parse_previous_steps_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_steps_left_)));
          set_has_previous_steps_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_finished_dir;
        break;
      }

      // optional .smd.proto.Direction finished_dir = 4;
      case 4: {
        if (tag == 32) {
         parse_finished_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::smd::proto::Direction_IsValid(value)) {
            set_finished_dir(static_cast< ::smd::proto::Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smd.proto.PlayerUndo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smd.proto.PlayerUndo)
  return false;
#undef DO_
}

void PlayerUndo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smd.proto.PlayerUndo)
  // optional bool is_new = 1;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_new(), output);
  }

  // optional .smd.proto.Direction previous_dir = 2;
  if (has_previous_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->previous_dir(), output);
  }

  // optional uint32 previous_steps_left = 3;
  if (has_previous_steps_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->previous_steps_left(), output);
  }

  // optional .smd.proto.Direction finished_dir = 4;
  if (has_finished_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->finished_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smd.proto.PlayerUndo)
}

::google::protobuf::uint8* PlayerUndo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smd.proto.PlayerUndo)
  // optional bool is_new = 1;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_new(), target);
  }

  // optional .smd.proto.Direction previous_dir = 2;
  if (has_previous_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->previous_dir(), target);
  }

  // optional uint32 previous_steps_left = 3;
  if (has_previous_steps_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->previous_steps_left(), target);
  }

  // optional .smd.proto.Direction finished_dir = 4;
  if (has_finished_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->finished_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smd.proto.PlayerUndo)
  return target;
}

int PlayerUndo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:smd.proto.PlayerUndo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool is_new = 1;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

    // optional .smd.proto.Direction previous_dir = 2;
    if (has_previous_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->previous_dir());
    }

    // optional uint32 previous_steps_left = 3;
    if (has_previous_steps_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_steps_left());
    }

    // optional .smd.proto.Direction finished_dir = 4;
    if (has_finished_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->finished_dir());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUndo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smd.proto.PlayerUndo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerUndo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerUndo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smd.proto.PlayerUndo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smd.proto.PlayerUndo)
    MergeFrom(*source);
  }
}

void PlayerUndo::MergeFrom(const PlayerUndo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smd.proto.PlayerUndo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_previous_dir()) {
      set_previous_dir(from.previous_dir());
    }
    if (from.has_previous_steps_left()) {
      set_previous_steps_left(from.previous_steps_left());
    }
    if (from.has_finished_dir()) {
      set_finished_dir(from.finished_dir());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerUndo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smd.proto.PlayerUndo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUndo::CopyFrom(const PlayerUndo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smd.proto.PlayerUndo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUndo::IsInitialized() const {

  return true;
}

void PlayerUndo::Swap(PlayerUndo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerUndo::InternalSwap(PlayerUndo* other) {
  std::swap(is_new_, other->is_new_);
  std::swap(previous_dir_, other->previous_dir_);
  std::swap(previous_steps_left_, other->previous_steps_left_);
  std::swap(finished_dir_, other->finished_dir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerUndo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUndo_descriptor_;
  metadata.reflection = PlayerUndo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerUndo

// optional bool is_new = 1;
bool PlayerUndo::has_is_new() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerUndo::set_has_is_new() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerUndo::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerUndo::clear_is_new() {
  is_new_ = false;
  clear_has_is_new();
}
 bool PlayerUndo::is_new() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerUndo.is_new)
  return is_new_;
}
 void PlayerUndo::set_is_new(bool value) {
  set_has_is_new();
  is_new_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerUndo.is_new)
}

// optional .smd.proto.Direction previous_dir = 2;
bool PlayerUndo::has_previous_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerUndo::set_has_previous_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerUndo::clear_has_previous_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerUndo::clear_previous_dir() {
  previous_dir_ = 0;
  clear_has_previous_dir();
}
 ::smd::proto::Direction PlayerUndo::previous_dir() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerUndo.previous_dir)
  return static_cast< ::smd::proto::Direction >(previous_dir_);
}
 void PlayerUndo::set_previous_dir(::smd::proto::Direction value) {
  assert(::smd::proto::Direction_IsValid(value));
  set_has_previous_dir();
  previous_dir_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerUndo.previous_dir)
}

// optional uint32 previous_steps_left = 3;
bool PlayerUndo::has_previous_steps_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerUndo::set_has_previous_steps_left() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerUndo::clear_has_previous_steps_left() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerUndo::clear_previous_steps_left() {
  previous_steps_left_ = 0u;
  clear_has_previous_steps_left();
}
 ::google::protobuf::uint32 PlayerUndo::previous_steps_left() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerUndo.previous_steps_left)
  return previous_steps_left_;
}
 void PlayerUndo::set_previous_steps_left(::google::protobuf::uint32 value) {
  set_has_previous_steps_left();
  previous_steps_left_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerUndo.previous_steps_left)
}

// optional .smd.proto.Direction finished_dir = 4;
bool PlayerUndo::has_finished_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerUndo::set_has_finished_dir() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerUndo::clear_has_finished_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerUndo::clear_finished_dir() {
  finished_dir_ = 0;
  clear_has_finished_dir();
}
 ::smd::proto::Direction PlayerUndo::finished_dir() const {
  // @@protoc_insertion_point(field_get:smd.proto.PlayerUndo.finished_dir)
  return static_cast< ::smd::proto::Direction >(finished_dir_);
}
 void PlayerUndo::set_finished_dir(::smd::proto::Direction value) {
  assert(::smd::proto::Direction_IsValid(value));
  set_has_finished_dir();
  finished_dir_ = value;
  // @@protoc_insertion_point(field_set:smd.proto.PlayerUndo.finished_dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UndoData::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndoData::UndoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:smd.proto.UndoData)
}

void UndoData::InitAsDefaultInstance() {
}

UndoData::UndoData(const UndoData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:smd.proto.UndoData)
}

void UndoData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  players_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  players_.SetEntryDescriptor(
      &::smd::proto::UndoData_PlayersEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoData::~UndoData() {
  // @@protoc_insertion_point(destructor:smd.proto.UndoData)
  SharedDtor();
}

void UndoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoData_descriptor_;
}

const UndoData& UndoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fsmd_2eproto();
  return *default_instance_;
}

UndoData* UndoData::default_instance_ = NULL;

UndoData* UndoData::New(::google::protobuf::Arena* arena) const {
  UndoData* n = new UndoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UndoData::Clear() {
// @@protoc_insertion_point(message_clear_start:smd.proto.UndoData)
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UndoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:smd.proto.UndoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .smd.proto.PlayerUndo> players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          UndoData_PlayersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::smd::proto::PlayerUndo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo > > parser(&players_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "smd.proto.UndoData.PlayersEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:smd.proto.UndoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:smd.proto.UndoData)
  return false;
#undef DO_
}

void UndoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:smd.proto.UndoData)
  // map<string, .smd.proto.PlayerUndo> players = 1;
  if (!this->players().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "smd.proto.UndoData.PlayersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->players().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->players().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<UndoData_PlayersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(players_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<UndoData_PlayersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it) {
        entry.reset(players_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:smd.proto.UndoData)
}

::google::protobuf::uint8* UndoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:smd.proto.UndoData)
  // map<string, .smd.proto.PlayerUndo> players = 1;
  if (!this->players().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "smd.proto.UndoData.PlayersEntry.key");
      }
    };

    if (deterministic &&
        this->players().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->players().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<UndoData_PlayersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(players_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<UndoData_PlayersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_iterator
          it = this->players().begin();
          it != this->players().end(); ++it) {
        entry.reset(players_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smd.proto.UndoData)
  return target;
}

int UndoData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:smd.proto.UndoData)
  int total_size = 0;

  // map<string, .smd.proto.PlayerUndo> players = 1;
  total_size += 1 * this->players_size();
  {
    ::google::protobuf::scoped_ptr<UndoData_PlayersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >::const_iterator
        it = this->players().begin();
        it != this->players().end(); ++it) {
      entry.reset(players_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:smd.proto.UndoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UndoData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UndoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:smd.proto.UndoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:smd.proto.UndoData)
    MergeFrom(*source);
  }
}

void UndoData::MergeFrom(const UndoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:smd.proto.UndoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UndoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:smd.proto.UndoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoData::CopyFrom(const UndoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smd.proto.UndoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoData::IsInitialized() const {

  return true;
}

void UndoData::Swap(UndoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UndoData::InternalSwap(UndoData* other) {
  players_.Swap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UndoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoData_descriptor_;
  metadata.reflection = UndoData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UndoData

// map<string, .smd.proto.PlayerUndo> players = 1;
int UndoData::players_size() const {
  return players_.size();
}
void UndoData::clear_players() {
  players_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >&
UndoData::players() const {
  // @@protoc_insertion_point(field_map:smd.proto.UndoData.players)
  return players_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::smd::proto::PlayerUndo >*
UndoData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_map:smd.proto.UndoData.players)
  return players_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace smd

// @@protoc_insertion_point(global_scope)
